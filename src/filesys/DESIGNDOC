			+---------------------------+
			|			CS 140			|
			|	PROJECT 4: FILE SYSTEMS	|
			|		DESIGN DOCUMENT		|
			+---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sridhar Gopinath <g.sridhar53@gmail.com>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

		     INDEXED AND EXTENSIBLE FILES
		     ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// Block of all zeros which is used to write 0s to a file block
char *zeros ;


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work.

It is exactly 8 MB. I have used double indirection to achieve this.
The first level sector table is stored in the inode->data.start block. Since size required to store each block sector is 4 Bytes and the size of each block is 512 bytes, I can store 128 entries in each disk block.
Each of these entries point to another disk block which acts like the second level disk block table.
Entries in the second level disk block table correspond to the actual disk blocks where the data is stored. The number of entries possible in the second level disk block table is again 128.
Hence, I have a first level disk block table present at inode->data.start. This indexes to 128 second level disk block tables. Each of these 128 second level disk block tables point to the disk blocks where the data is stored.
The total size becomes 512*128*128 = 8 MB


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.

I have a lock on each inode present in the system. This will help synchronize all the per-inode operations.
A file is extended only when you are writing to it past the EOF or if you are seeking if past the EOF.
Both of these operations occur only after acquiring a lock on the inode corresponding to that file. Two processes can attempt to extend the file only if they execute these operations concurrently.
Even when that happens, the operations are synchronized which will make sure that only one of these processes can actually extend the file while the other process has to wait for it to complete.


>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.

If A tries to read the file before B writes to the file, then during this time the file is not extended. At this point if A tries to read from the EOF, since the semantics say that reading past the EOF should always return 0 bytes, I return 0 bytes. This is done by looking at the length of the inode before performing a read operation on a inode. If the read is passing the EOF, I return 0. By this A reads nothing of what B will write.
If B writes to a file before A performs a read, then write at a position past EOF will result in the file being extended. This will make sure that the length of the inode is updated and the disk blocks are allocated, if required, and then the new data is written into it. If A performs a read after this, then A will read all of what B has written.
If A tries to read the file while B is writing to it, the block which A is trying to read will be in the buffer cache. The writes being performed by B are on the memory which represents the file block in the buffer cache. Now both of the processes have the same buffer block. Now A can read only that data that is written by B. This means that A will be able to read part of what B has written.


>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

			    SUBDIRECTORIES
			    ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.



---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

			     BUFFER CACHE
			     ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// BUFFER CACHE Blocks
struct hash cache_blocks ;

// Lock to access the cache blocks
struct lock cache ;

// List of all the cache blocks in memory
struct list cache_list ;

// Cache block table entry
struct cache
{
	block_sector_t idx ;					// HASH KEY. Sector number on the disk this block belongs to

	void *kblock ;							// Kernel block which stores the block data

	bool accessed ;							// Accessed flag
	bool dirty ;							// Dirty flag
	int in_use ;							// Number of processes currently using this cache block

	struct hash_elem hash_elem ;			// Hash element for storing cache block in the hash
	struct list_elem elem ;					// List element for the list used for eviction algorithm
} ;

// List of all the blocks that are in the process of getting evicted
struct list evict_list ;

// Lock to access the evict_list
struct lock evict ;


---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

I have implemented CLOCK algorithm for the replacement of the cache blocks.
I have a accessed, dirty and in_use flags in each of the buffer cache blocks. I increase the in_use count of a cache block whenever a request to block comes. This is decremented after the request has been completed. This is done to take of the case when the block is selected for eviction when the block is still in use.
The access flag is set everytime read or write is called on the cache block.
Dirty flag is set when the cache block is written.
The algorithm picks up a cache block and checks if the in_use is 0. If not, puts it at the back of the list and picks the next block. If the accessed flag is true, makes is false and puts it back. If the accessed flag is false, it is selected for eviction.
If the dirty block is set, then the block is written back to the disk and then removed from the cache block list.


>> C3: Describe your implementation of write-behind.

All the writes for a particular cache block is done on the buffer cache block. Only when the block is selected for eviction, then we have to write it back to the disk.
I check if the dirty flag is set for the cache block. If so, then that block is written back.
Also, all the blocks are flushed onto the disk when the filesys_done function is executed. This function is executed when the system is shutting down. This is done to make sure that all the cache blocks finally end up in the file system and are not lost by staying in the memory.


>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

I use a flag called as in_use in each of the cache block entry which indicates the number of processes that are currently using that block.
While evicting a cache block, in_use is checked and only if it is 0, it is considered for eviction. Else, it is put back at the end of the list and the next candidate is chosen.


>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

I use a evict list which contains the list of all the blocks which are yet to be flushed back into the disk. If a request for that block comes, then I will make the thread sleep for 12 ticks. This is done to make sure that the eviction thread will run and it will evict all the blocks that are in evict_list.
By doing this, I will be sure that an access to a block will not come during the eviction of that block.


---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
